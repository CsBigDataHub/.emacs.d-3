* Transcribing
#+BEGIN_SRC emacs-lisp :tangle yes
  (define-minor-mode transcribe-mode
    "A minor mode for transcription of audio."
    :light "Transcribe mode"
    :keymap (make-sparse-keymap))

  (defun tag-word-or-region (text-begin text-end)
    "Surround current word or region with given text."
    (interactive "sStart tag: \nsEnd tag: ")
    (let (pos1 pos2 bds)
      (if (and transient-mark-mode mark-active)
          (progn
            (goto-char (region-end))
            (insert text-end)
            (goto-char (region-beginning))
            (insert text-begin))
        (progn
          (setq bds (bounds-of-thing-at-point 'symbol))
          (goto-char (cdr bds))
          (insert text-end)
          (goto-char (car bds))
          (insert text-begin)))))

  (require 'smartparens-config)
  (sp-with-modes 'transcribe-mode
    (sp-local-pair ">" "<")
    (sp-local-pair "<" ">")
    (sp-local-pair "°" "°")
    (sp-local-pair "[" "]")
    (sp-local-pair "((" "))")
    (sp-local-pair "(" ")"))

  (defhydra jethro/hydra-transcribe (:color blue :hint nil)
    "
  ^Command^
  ^^-------------------------------------------------------------------------------
  _._: Falling Intonation                   _d_: Softer Relative           
  _,_: Continuing Intonation                _j_: Sharp Fall in Pitch       
  _?_: Rising Intonation                    _k_: Sharp Rise in Pitch       
  _/_: Weak Rising Intonation (¿)           _>_: Rapid Delivery            
  _:_: Prolongation                         _<_: Slow Delivery             
  _-_: Halt or Self Interruption
  _u_: Stress or Emphasis
  _c_: Increased Loudness
  "
    ("." (lambda () (interactive) (insert-char ?.)))
    ("," (lambda () (interactive) (insert-char ?,)))
    ("?" (lambda () (interactive) (insert-char ??)))
    ("/" (lambda () (interactive) (insert-char ?¿)))
    (":" (lambda () (interactive) (insert-char ?:)))
    ("-" (lambda () (interactive) (insert-char ?-)))
    ("u" (lambda () (interactive) (tag-word-or-region "_" "_")))
    ("c" (lambda () (interactive) (upcase-dwim)))
    ("d" (lambda () (interactive) (tag-word-or-region "°" "°")))
    ("j" (lambda () (interactive) (insert-char ?↓)))
    ("k" (lambda () (interactive) (insert-char ?↑)))
    (">" (lambda () (interactive) (tag-word-or-region ">" "<")))
    ("<" (lambda () (interactive) (tag-word-or-region "<" ">")))
    ("[" (lambda () (interactive) (tag-word-or-region "[" "]"))) 
    ("q" nil))

  (key-chord-define transcribe-mode-map "kk" 'jethro/hydra-transcribe/body)
#+END_SRC
* writegood-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package writegood-mode)
#+END_SR
* Meghanada
Meghanada is a new minor-mode (meghanada-mode) that aims at improving
the editing experience for the Java. It works by using a combination
of an Emacs server.

- Gradle and Maven project support
- No need build tool's plugin
- Run build tool task
- Compile your project
- Syntax check and analyze java source (flycheck-meghanada)
- Support Generic Types
- Code completion with company-mode (company-meghanada)
- Optimize import
- Jump declaration
- Run Junit test (include test runner)
- Diagnostic reporting with flycheck (flycheck-meghanada)
- Show symbol's type info with el-doc
- Search references

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package meghanada
    :bind
    (:map meghanada-mode-map
          ("C-S-t" . meghanada-switch-testcase)
          ("M-RET" . meghanada-local-variable)
          ("M-r" . meghanada-reference)
          ("M-t" . meghanada-typeinfo))
    :init
    (add-hook 'java-mode-hook
              (lambda ()
                (google-set-c-style)
                (google-make-newline-indent)
                (meghanada-mode t)
                (smartparens-mode t)
                (add-hook 'before-save-hook 'meghanada-code-beautify-before-save)))
    :config
    (use-package realgud)
    (setq indent-tabs-mode nil)
    (setq tab-width 2)
    (setq c-basic-offset 2)
    (setq meghanada-server-remote-debug t)
    (setq meghanada-javac-xlint "-Xlint:all,-processing")
    (with-eval-after-load 'hydra
      (defhydra jethro/hydra-meghanada (:hint nil :exit t)
        "
  ^Edit^                           ^Tast or Task^
  ^^^^^^-------------------------------------------------------
  _f_: meghanada-compile-file      _m_: meghanada-restart
  _c_: meghanada-compile-project   _t_: meghanada-run-task
  _o_: meghanada-optimize-import   _j_: meghanada-run-junit-test-case
  _s_: meghanada-switch-test-case  _J_: meghanada-run-junit-class
  _v_: meghanada-local-variable    _R_: meghanada-run-junit-recent
  _i_: meghanada-import-all        _r_: meghanada-reference
  _g_: magit-status                _T_: meghanada-typeinfo
  _l_: helm-ls-git-ls
  _q_: exit
  "
        ("f" meghanada-compile-file)
        ("m" meghanada-restart)

        ("c" meghanada-compile-project)
        ("o" meghanada-optimize-import)
        ("s" meghanada-switch-test-case)
        ("v" meghanada-local-variable)
        ("i" meghanada-import-all)

        ("g" magit-status)
        ("l" helm-ls-git-ls)

        ("t" meghanada-run-task)
        ("T" meghanada-typeinfo)
        ("j" meghanada-run-junit-test-case)
        ("J" meghanada-run-junit-class)
        ("R" meghanada-run-junit-recent)
        ("r" meghanada-reference)

        ("q" exit)
        ("z" nil "leave"))

      (bind-key "C-c h m" 'jethro/hydra-meghanada/body meghanada-mode-map)) 
    :commands
    (meghanada-mode))
#+END_SRC
