#    -*- mode: org -*-


Archived entries from file /home/jethro/.emacs.d/config.org


* golden-ratio
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-08-11 Sat 10:00
  :ARCHIVE_FILE: ~/.emacs.d/config.org
  :ARCHIVE_OLPATH: Visual Enhancements
  :ARCHIVE_CATEGORY: config
  :END:
  Give the working window more screen estate.

  #+begin_src emacs-lisp :tangle yes
    (use-package golden-ratio
      :diminish golden-ratio-mode
      :hook
      (after-init . golden-ratio-mode))
  #+end_src

* Transcribing
#+BEGIN_SRC emacs-lisp :tangle yes
  (define-minor-mode transcribe-mode
    "A minor mode for transcription of audio."
    :light "Transcribe mode"
    :keymap (make-sparse-keymap))

  (defun tag-word-or-region (text-begin text-end)
    "Surround current word or region with given text."
    (interactive "sStart tag: \nsEnd tag: ")
    (let (pos1 pos2 bds)
      (if (and transient-mark-mode mark-active)
          (progn
            (goto-char (region-end))
            (insert text-end)
            (goto-char (region-beginning))
            (insert text-begin))
        (progn
          (setq bds (bounds-of-thing-at-point 'symbol))
          (goto-char (cdr bds))
          (insert text-end)
          (goto-char (car bds))
          (insert text-begin)))))

  (require 'smartparens-config)
  (sp-with-modes 'transcribe-mode
    (sp-local-pair ">" "<")
    (sp-local-pair "<" ">")
    (sp-local-pair "°" "°")
    (sp-local-pair "[" "]")
    (sp-local-pair "((" "))")
    (sp-local-pair "(" ")"))

  (defhydra jethro/hydra-transcribe (:color blue :hint nil)
    "
  ^Command^
  ^^-------------------------------------------------------------------------------
  _._: Falling Intonation                   _d_: Softer Relative           
  _,_: Continuing Intonation                _j_: Sharp Fall in Pitch       
  _?_: Rising Intonation                    _k_: Sharp Rise in Pitch       
  _/_: Weak Rising Intonation (¿)           _>_: Rapid Delivery            
  _:_: Prolongation                         _<_: Slow Delivery             
  _-_: Halt or Self Interruption
  _u_: Stress or Emphasis
  _c_: Increased Loudness
  "
    ("." (lambda () (interactive) (insert-char ?.)))
    ("," (lambda () (interactive) (insert-char ?,)))
    ("?" (lambda () (interactive) (insert-char ??)))
    ("/" (lambda () (interactive) (insert-char ?¿)))
    (":" (lambda () (interactive) (insert-char ?:)))
    ("-" (lambda () (interactive) (insert-char ?-)))
    ("u" (lambda () (interactive) (tag-word-or-region "_" "_")))
    ("c" (lambda () (interactive) (upcase-dwim)))
    ("d" (lambda () (interactive) (tag-word-or-region "°" "°")))
    ("j" (lambda () (interactive) (insert-char ?↓)))
    ("k" (lambda () (interactive) (insert-char ?↑)))
    (">" (lambda () (interactive) (tag-word-or-region ">" "<")))
    ("<" (lambda () (interactive) (tag-word-or-region "<" ">")))
    ("[" (lambda () (interactive) (tag-word-or-region "[" "]"))) 
    ("q" nil))

  (key-chord-define transcribe-mode-map "kk" 'jethro/hydra-transcribe/body)
#+END_SRC
* writegood-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package writegood-mode)
#+END_SR
* Meghanada
Meghanada is a new minor-mode (meghanada-mode) that aims at improving
the editing experience for the Java. It works by using a combination
of an Emacs server.

- Gradle and Maven project support
- No need build tool's plugin
- Run build tool task
- Compile your project
- Syntax check and analyze java source (flycheck-meghanada)
- Support Generic Types
- Code completion with company-mode (company-meghanada)
- Optimize import
- Jump declaration
- Run Junit test (include test runner)
- Diagnostic reporting with flycheck (flycheck-meghanada)
- Show symbol's type info with el-doc
- Search references

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package meghanada
    :bind
    (:map meghanada-mode-map
          ("C-S-t" . meghanada-switch-testcase)
          ("M-RET" . meghanada-local-variable)
          ("M-r" . meghanada-reference)
          ("M-t" . meghanada-typeinfo))
    :init
    (add-hook 'java-mode-hook
              (lambda ()
                (google-set-c-style)
                (google-make-newline-indent)
                (meghanada-mode t)
                (smartparens-mode t)
                (add-hook 'before-save-hook 'meghanada-code-beautify-before-save)))
    :config
    (use-package realgud)
    (setq indent-tabs-mode nil)
    (setq tab-width 2)
    (setq c-basic-offset 2)
    (setq meghanada-server-remote-debug t)
    (setq meghanada-javac-xlint "-Xlint:all,-processing")
    (with-eval-after-load 'hydra
      (defhydra jethro/hydra-meghanada (:hint nil :exit t)
        "
  ^Edit^                           ^Tast or Task^
  ^^^^^^-------------------------------------------------------
  _f_: meghanada-compile-file      _m_: meghanada-restart
  _c_: meghanada-compile-project   _t_: meghanada-run-task
  _o_: meghanada-optimize-import   _j_: meghanada-run-junit-test-case
  _s_: meghanada-switch-test-case  _J_: meghanada-run-junit-class
  _v_: meghanada-local-variable    _R_: meghanada-run-junit-recent
  _i_: meghanada-import-all        _r_: meghanada-reference
  _g_: magit-status                _T_: meghanada-typeinfo
  _l_: helm-ls-git-ls
  _q_: exit
  "
        ("f" meghanada-compile-file)
        ("m" meghanada-restart)

        ("c" meghanada-compile-project)
        ("o" meghanada-optimize-import)
        ("s" meghanada-switch-test-case)
        ("v" meghanada-local-variable)
        ("i" meghanada-import-all)

        ("g" magit-status)
        ("l" helm-ls-git-ls)

        ("t" meghanada-run-task)
        ("T" meghanada-typeinfo)
        ("j" meghanada-run-junit-test-case)
        ("J" meghanada-run-junit-class)
        ("R" meghanada-run-junit-recent)
        ("r" meghanada-reference)

        ("q" exit)
        ("z" nil "leave"))

      (bind-key "C-c h m" 'jethro/hydra-meghanada/body meghanada-mode-map)) 
    :commands
    (meghanada-mode))
#+END_SRC

* SOS
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-08-11 Sat 10:02
  :ARCHIVE_FILE: ~/.emacs.d/config.org
  :ARCHIVE_OLPATH: Miscellaneous
  :ARCHIVE_CATEGORY: config
  :END:
Search Stack Overflow
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package sos
    :commands (sos))
#+END_SRC


* which-key
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-08-11 Sat 10:02
  :ARCHIVE_FILE: ~/.emacs.d/config.org
  :ARCHIVE_OLPATH: Miscellaneous
  :ARCHIVE_CATEGORY: config
  :END:
#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :diminish which-key-mode
    :hook
    (after-init . which-key-mode))
#+end_src

* Magithub
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-08-11 Sat 10:02
  :ARCHIVE_FILE: ~/.emacs.d/config.org
  :ARCHIVE_OLPATH: Project Management/Projectile
  :ARCHIVE_CATEGORY: config
  :END:
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package magithub
    :after magit
    :config (magithub-feature-autoinject t))
#+END_SRC

* Org Mode for Reading papers
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-08-11 Sat 10:03
  :ARCHIVE_FILE: ~/.emacs.d/config.org
  :ARCHIVE_OLPATH: Org-Mode
  :ARCHIVE_CATEGORY: config
  :END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org-ref
    :after org
    :custom
    (org-ref-notes-directory "~/.org/papers/")
    (org-ref-bibliography-notes "~/.org/papers/notes.org")
    (org-ref-default-bibliography '("~/.org/papers/index.bib"))
    (org-ref-pdf-directory "~/.org/papers/lib/")
    (ivy-bibtex-bibliography "~/.org/papers/index.bib") ;; where your references are stored
    (ivy-bibtex-library-path "~/.org/papers/lib/") ;; where your pdfs etc are stored
    (ivy-bibtex-notes-path "~/.org/papers/notes.org") ;; where your notes are stored
    (bibtex-completion-bibliography "~/.org/papers/index.bib") ;; writing completion
    (bibtex-completion-notes-path "~/.org/papers/notes.org")
    (bibtex-completion-library-path "~/.org/papers/lib/")
    (bibtex-completion-pdf-symbol "⌘")
    (bibtex-completion-notes-symbol "✎")
    (bibtex-autokey-year-length 4)
    (bibtex-autokey-name-year-separator "-")
    (bibtex-autokey-year-title-separator "-")
    (bibtex-autokey-titleword-separator "-")
    (bibtex-autokey-titlewords 2)
    (bibtex-autokey-titlewords-stretch 1)
    (bibtex-autokey-titleword-length 5)
    :config
    (require 'org-ref-bibtex)
    (key-chord-define-global "jj" 'org-ref-bibtex-hydra/body) 
    (require 'org-ref-url-utils)
    (require 'org-ref-arxiv))
#+END_SRC
** Trimming citation titles
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun jethro/trim-citation-title (title)
    "Removes newlines and curly braces and truncates long titles."
    (let* ((title (if (string-match-p "\n" title)
                      (replace-regexp-in-string "\n[ ]*" " " (substring title 1 -1))
                    title))
           (len (length title))
           (end (min len 75)))
      (substring title 0 end)))
#+END_SRC
** Custom Arxiv Fetch Function
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun jethro/get-arxiv-paper ()
    "Fetches Arxiv paper, and adds it to inbox."
    (interactive)  
    (require 'org-ref-arxiv)
    (let* ((url (read-string "Arxiv:" (thing-at-point 'url)))
           (pos 0)
           (bibfile (car org-ref-default-bibliography))
           (pdfdir org-ref-pdf-directory)
           (regexp "\\w+\\.\\w+$")
           (match (progn
                    (string-match regexp url pos)
                    (match-string 0 url))))
      (arxiv-get-pdf-add-bibtex-entry match bibfile pdfdir)
      (save-window-excursion
        (find-file bibfile)
        (org-capture nil "p"))))

  (bind-key "C-x \\" 'jethro/get-arxiv-paper)

#+END_SRC
** Custom Agenda View
#+BEGIN_SRC emacs-lisp :tangle yes
  (setq jethro/org-agenda-papers-view
        `("p" "Papers" 
          ((todo "NEXT"
                 ((org-agenda-overriding-header "In Progress")
                  (org-agenda-files '("~/.org/papers/papers.org"))))
           (todo "TODO"
                 ((org-agenda-overriding-header "To Read")
                  (org-agenda-files '("~/.org/papers/papers.org"))))
           (todo "DONE"
                 ((org-agenda-overriding-header "To Read")
                  (org-agenda-files '("~/.org/papers/papers.org"))))
           nil)))
#+END_SRC

* dumb-jump
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-08-11 Sat 10:07
  :ARCHIVE_FILE: ~/.emacs.d/config.org
  :ARCHIVE_OLPATH: Moving Around
  :ARCHIVE_CATEGORY: config
  :END:
Use it to jump to function definitions. Requires no external
dependencies.

#+begin_src emacs-lisp :tangle yes
  (use-package dumb-jump
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g j" . dumb-jump-go)
           ("M-g i" . dumb-jump-go-prompt)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :custom
    (dumb-jump-selector 'ivy))
#+end_src

* Keychord
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-08-11 Sat 10:08
  :ARCHIVE_FILE: ~/.emacs.d/config.org
  :ARCHIVE_OLPATH: Moving Around
  :ARCHIVE_CATEGORY: config
  :END:
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package key-chord
      :config
      (key-chord-mode 1))
  #+END_SRC

* Thick modeline bar
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-08-11 Sat 10:09
  :ARCHIVE_FILE: ~/.emacs.d/config.org
  :ARCHIVE_OLPATH: Visual Enhancements/Modeline
  :ARCHIVE_CATEGORY: config
  :END:
#+BEGIN_SRC emacs-lisp :tangle no
  (custom-set-faces
   '(mode-line ((t (:background "#2B2B2B" :foreground "#DCDCCC" :box (:line-width 4 :color "#2B2B2B"))))))
#+END_SRC

* Recentf
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-08-11 Sat 10:09
  :ARCHIVE_FILE: ~/.emacs.d/config.org
  :ARCHIVE_OLPATH: Better Defaults
  :ARCHIVE_CATEGORY: config
  :END:

When I'm using Emacs via =emacsclient=, my recent files don't get
saved because I never ever quit Emacs. Instead, now I run the function
every 5 minutes. Inhibit recentf from printing messages into the
minibuffer.

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'recentf)
  (run-at-time (* 5 60) nil
         (lambda ()
     (let ((inhibit-message t))
       (recentf-save-list))))
#+END_SRC


* starring elfeed articles
  :PROPERTIES:
  :ARCHIVE_TIME: 2018-08-11 Sat 10:15
  :ARCHIVE_FILE: ~/.emacs.d/config.org
  :ARCHIVE_OLPATH: Reading feeds with elfeed
  :ARCHIVE_CATEGORY: config
  :END:
Based on http://matt.hackinghistory.ca/2015/11/22/elfeed/.
#+BEGIN_SRC emacs-lisp :tangle yes
  ;; add a star
  (defun jethro/elfeed-star ()
    "Apply starred to all selected entries."
    (interactive )
    (let* ((entries (elfeed-search-selected))
           (tag (intern "starred")))

      (cl-loop for entry in entries do (elfeed-tag entry tag))
      (mapc #'elfeed-search-update-entry entries)
      (unless (use-region-p) (forward-line))))

  ;; remove a start
  (defun jethro/elfeed-unstar ()
    "Remove starred tag from all selected entries."
    (interactive )
    (let* ((entries (elfeed-search-selected))
           (tag (intern "starred")))

      (cl-loop for entry in entries do (elfeed-untag entry tag))
      (mapc #'elfeed-search-update-entry entries)
      (unless (use-region-p) (forward-line))))

  ;; face for starred articles
  (defface elfeed-search-starred-title-face
    '((t :foreground "#FFDA46"))
    "Marks a starred Elfeed entry.")

  (push '(starred elfeed-search-starred-title-face) elfeed-search-face-alist)

  (defalias 'elfeed-toggle-star
    (elfeed-expose #'elfeed-search-toggle-all 'starred))

  (eval-after-load 'elfeed-search
    '(define-key elfeed-search-mode-map (kbd "m") 'elfeed-toggle-star))
#+END_SRC

* Reloading Emacs Config
:PROPERTIES:
:ARCHIVE_TIME: 2018-08-11 Sat 10:23
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Better Defaults
:ARCHIVE_CATEGORY: config
:END:

I want an easy way to reload my configuration when I change it. I bind
it to =<f11>=.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun jethro/reload-init ()
    "Reloads the config file."
    (interactive)
    (load-file "~/.emacs.d/init.el"))

  (bind-key "<f11>" 'jethro/reload-init)
#+END_SRC


* org-bullets
:PROPERTIES:
:ARCHIVE_TIME: 2018-10-11 Thu 21:22
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Org-Mode/Setup
:ARCHIVE_CATEGORY: config
:END:
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '(" ")))
#+END_SRC

* dired-subtree
:PROPERTIES:
:ARCHIVE_TIME: 2018-10-27 Sat 14:32
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Moving Around/Dired
:ARCHIVE_CATEGORY: config
:END:
The dired-subtree package (part of the magnificent dired hacks) allows
you to expand subdirectories in place, like a tree structure.
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dired-subtree
    :bind
    (:map dired-mode-map
          ("i" . dired-subtree-insert)
          (";" . dired-subtree-remove)))
#+END_SRC

* PDFs
:PROPERTIES:
:ARCHIVE_TIME: 2018-11-20 Tue 13:23
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Languages
:ARCHIVE_CATEGORY: config
:END:
We use [[https://github.com/politza/pdf-tools][pdf-tools]] for PDF viewing, which has first class support for
highlighting and annotations.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package pdf-tools
    :mode (("\\.pdf\\'" . pdf-view-mode))
    :bind
    (:map pdf-view-mode-map
          (("h" . pdf-annot-add-highlight-markup-annotation)
           ("t" . pdf-annot-add-text-annotation)
           ("D" . pdf-annot-delete)
           ("C-s" . isearch-forward)))
    :custom
    ;; More fine-grained resizing (10%)
    (pdf-view-resize-factor 1.1)
    :config
    ;; Install pdf tools
    (pdf-tools-install))
#+END_SRC

* syncing elfeed database
:PROPERTIES:
:ARCHIVE_TIME: 2018-11-30 Fri 22:57
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Reading feeds with elfeed
:ARCHIVE_CATEGORY: config
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun jethro/elfeed-load-db-and-open ()
    "Wrapper to load the elfeed db from disk before opening"
    (interactive)
    (elfeed-db-load)
    (elfeed)
    (elfeed-search-update--force))

  (defun jethro/elfeed-save-db-and-bury ()
    "Wrapper to save the elfeed db to disk before burying buffer"
    (interactive)
    (elfeed-db-save)
    (quit-window))

  (bind-key "<f6>" 'jethro/elfeed-load-db-and-open)

  (eval-after-load 'elfeed-search
    '(define-key elfeed-search-mode-map (kbd "q") 'jethro/elfeed-save-db-and-bury))
#+END_SRC

* Publishing
:PROPERTIES:
:ARCHIVE_TIME: 2018-12-05 Wed 21:39
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Org-Mode/Org Mode for Note taking
:ARCHIVE_CATEGORY: config
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ox-publish
    :ensure f
    :no-require t
    :commands org-publish-all org-publish
    :after org
    :custom
    (org-html-htmlize-output-type nil)
    (org-html-head-include-default-style nil)
    (org-publish-project-alist
     '(("org-notes-assets"
        :base-directory "~/.org/deft/css/"
        :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
        :publishing-directory "~/.org/deft/docs/css/"
        :recursive t
        :publishing-function org-publish-attachment
        )
       ("org-notes-images"
        :base-directory "~/.org/deft/images/"
        :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
        :publishing-directory "~/.org/deft/docs/images/"
        :recursive t
        :publishing-function org-publish-attachment
        )
       ("org-notes"
        :base-directory "~/.org/deft/"
        :base-extension "org"
        :publishing-directory "~/.org/deft/docs/"
        :recursive t
        :publishing-function org-html-publish-to-html
        :headline-levels 4
        :auto-sitemap t
        :author "Jethro Kuan"
        :email "jethrokuan95@gmail.com"
        :sitemap-filename "index.org"
        :sitemap-title "Jethro's Braindump"
        :style "<link rel=\"stylesheet\" href=\"https://unpkg.com/sakura.css/css/sakura.css\" type=\"text/css\">")
       ("org" :components ("org-notes-assets" "org-notes-images")))))
#+END_SRC

* Sphinx Docs
:PROPERTIES:
:ARCHIVE_TIME: 2019-01-10 Thu 23:27
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Languages/Python
:ARCHIVE_CATEGORY: config
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package sphinx-doc
    :init
    (add-hook 'python-mode-hook 'sphinx-doc-mode))
#+END_SRC

* Reloading Emacs Config
:PROPERTIES:
:ARCHIVE_TIME: 2019-02-01 Fri 07:20
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Better Defaults
:ARCHIVE_CATEGORY: config
:END:

I want an easy way to reload my configuration when I change it. I bind
it to =<f11>=.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun jethro/reload-init ()
    "Reloads the config file."
    (interactive)
    (load-file "~/.emacs.d/init.el"))

  (bind-key "<f11>" 'jethro/reload-init)
#+END_SRC


* Auto-saving on focus out
:PROPERTIES:
:ARCHIVE_TIME: 2019-02-01 Fri 07:22
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Better Defaults
:ARCHIVE_CATEGORY: config
:END:

Auto save all open buffers, when Emacs loses focus.
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'focus-out-hook
            (lambda () (save-some-buffers t)))
#+END_SRC


* Color-identifiers mode
:PROPERTIES:
:ARCHIVE_TIME: 2019-02-01 Fri 07:25
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Appearance
:ARCHIVE_CATEGORY: config
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package color-identifiers-mode
    :config
    (color-identifiers-mode +1))
#+END_SRC

* Eshell
:PROPERTIES:
:ARCHIVE_TIME: 2019-02-01 Fri 07:26
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_CATEGORY: config
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package eshell
    :commands eshell
    :bind
    (("C-x m" . jethro/eshell-here))
    :config
    (require 'em-smart)
    (let ((bash (executable-find "bash")))
      (setq-default explicit-shell-file-name bash)
      (setq-default shell-file-name bash))
    (use-package esh-autosuggest
      :hook (eshell-mode . esh-autosuggest-mode))
    (defun jethro/eshell-here ()
      "Opens up a new shell in projectile root. If a prefix argument is
  passed, use the buffer's directory."
      (interactive)
      (let* ((projectile-name (projectile-project-name))
             (current-directory (car
                                 (last
                                  (split-string
                                   (if (buffer-file-name)
                                       (file-name-directory (buffer-file-name))
                                     default-directory) "/" t)))))
        (split-window-vertically)
        (other-window 1)
        (if (equal projectile-name "-")
            (progn
              (eshell "new")
              (rename-buffer (concat "*eshell: " current-directory "*")))
          (projectile-with-default-dir (projectile-project-root)
            (eshell "new")
            (rename-buffer (concat "*eshell: " projectile-name "*"))))))
    (defun eshell/x ()
      (unless (one-window-p)
        (delete-window))
      (eshell/exit))
    :custom
    (eshell-scroll-to-bottom-on-input 'all)
    (eshell-hist-ignoredups t)
    (eshell-save-history-on-exit t)
    (eshell-prefer-lisp-functions nil)
    (eshell-destroy-buffer-when-process-dies t)
    (eshell-glob-case-insensitive nil)
    (eshell-error-if-no-glob nil)
    (eshell-where-to-jump 'begin)
    (eshell-review-quick-commands nil)
    (eshell-smart-space-goes-to-end t))

#+END_SRC

* Hydra
:PROPERTIES:
:ARCHIVE_TIME: 2019-02-01 Fri 07:28
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Core Utilities
:ARCHIVE_CATEGORY: config
:END:
#+begin_src emacs-lisp :tangle no
  (use-package hydra)
#+end_src

* Requiring =dired=
:PROPERTIES:
:ARCHIVE_TIME: 2019-02-01 Fri 07:31
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Moving Around/Dired
:ARCHIVE_CATEGORY: config
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'dired)
#+END_SRC

* Trash files instead of deleting them
:PROPERTIES:
:ARCHIVE_TIME: 2019-02-01 Fri 07:31
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Moving Around/Dired
:ARCHIVE_CATEGORY: config
:END:
Right now, I don't use a desktop manager that manages trash, so this
option is not turned on.

    #+BEGIN_SRC emacs-lisp :tangle no
  (setq delete-by-moving-to-trash t)
    #+END_SRC

* Display-buffer-alist
:PROPERTIES:
:ARCHIVE_TIME: 2019-02-01 Fri 07:32
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Moving Around
:ARCHIVE_CATEGORY: config
:END:
#+begin_src emacs-lisp :tangle yes
  (progn
    ;; `window.el'
    ;; `display-buffer-alist' determines how and where buffers are displayed:
    (bind-key "C-c w" #'window-toggle-side-windows)
    (setq display-buffer-alist
          ;; Help and stuff at the right
          `((,(rx string-start (or "*Apropos"
                                   "*Backtrace"
                                   "*Compile-Log*"
                                   "*Ledger Report"
                                   "*Man"
                                   "*Process List*"
                                   "*Python"
                                   "*R:"
                                   "*Warnings*"
                                   "*WoMan"
                                   "*compilation"
                                   "*eglot help"
                                   (and (0+ anything) ".pdf")
                                   (and (1+ not-newline) " output*"))) ; AUCTeX
             (display-buffer-reuse-window display-buffer-in-side-window)
             (side . right)
             (reusable-frames . nil)
             (window-width . 80)
             (window-height . 0.45))
            ;; Side window on bottom:
            (,(rx string-start (or "*Calendar"
                                   "*ert"
                                   "*Reconcile"))
             (display-buffer-reuse-window display-buffer-in-side-window)
             (side . bottom)
             (reusable-frames . nil))
            ;; Right side, below the inferior buffer
            (,(rx string-start (or "*help"
                                   "R_x11"))
             (display-buffer-reuse-window display-buffer-in-side-window)
             (side . right)
             (slot . 1)
             (window-width . 80)
             (reusable-frames . nil))
            ;; Open shell in a single window
            (,(rx string-start (or "*Annotate "
                                   "*edit-indirect"
                                   "*shell"))
             (display-buffer-reuse-window display-buffer-same-window)
             (reusable-frames . nil)))))
#+end_src

* Align Regexp
:PROPERTIES:
:ARCHIVE_TIME: 2019-02-01 Fri 07:33
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Editing Text
:ARCHIVE_CATEGORY: config
:END:
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun jethro/align-repeat (start end regexp &optional justify-right after)
    "Repeat alignment with respect to the given regular expression.
  If JUSTIFY-RIGHT is non nil justify to the right instead of the
  left. If AFTER is non-nil, add whitespace to the left instead of
  the right."
    (interactive "r\nsAlign regexp: ")
    (let* ((ws-regexp (if (string-empty-p regexp)
                          "\\(\\s-+\\)"
                        "\\(\\s-*\\)"))
           (complete-regexp (if after
                                (concat regexp ws-regexp)
                              (concat ws-regexp regexp)))
           (group (if justify-right -1 1)))
      (message "%S" complete-regexp)
      (align-regexp start end complete-regexp group 1 t)))

  ;; Modified answer from http://emacs.stackexchange.com/questions/47/align-vertical-columns-of-numbers-on-the-decimal-point
  (defun jethro/align-repeat-decimal (start end)
    "Align a table of numbers on decimal points and dollar signs (both optional)"
    (interactive "r")
    (require 'align)
    (align-region start end nil
                  '((nil (regexp . "\\([\t ]*\\)\\$?\\([\t ]+[0-9]+\\)\\.?")
                         (repeat . t)
                         (group 1 2)
                         (spacing 1 1)
                         (justify nil t)))
                  nil))

  (defmacro jethro/create-align-repeat-x (name regexp &optional justify-right default-after)
    (let ((new-func (intern (concat "jethro/align-repeat-" name))))
      `(defun ,new-func (start end switch)
         (interactive "r\nP")
         (let ((after (not (eq (if switch t nil) (if ,default-after t nil)))))
           (jethro/align-repeat start end ,regexp ,justify-right after)))))

  (jethro/create-align-repeat-x "comma" "," nil t)
  (jethro/create-align-repeat-x "semicolon" ";" nil t)
  (jethro/create-align-repeat-x "colon" ":" nil t)
  (jethro/create-align-repeat-x "equal" "=")
  (jethro/create-align-repeat-x "math-oper" "[+\\-*/]")
  (jethro/create-align-repeat-x "ampersand" "&")
  (jethro/create-align-repeat-x "bar" "|")
  (jethro/create-align-repeat-x "left-paren" "(")
  (jethro/create-align-repeat-x "right-paren" ")" t)
  (jethro/create-align-repeat-x "backslash" "\\\\")

  (defvar align-regexp-map nil "keymap for `align-regexp'")

  (setq align-regexp-map (make-sparse-keymap))
  (define-key align-regexp-map (kbd "&") 'jethro/align-repeat-ampersand)
  (define-key align-regexp-map (kbd "(") 'jethro/align-repeat-left-paren)
  (define-key align-regexp-map (kbd ")") 'jethro/align-repeat-right-paren)
  (define-key align-regexp-map (kbd ",") 'jethro/align-repeat-comma)
  (define-key align-regexp-map (kbd ".") 'jethro/align-repeat-decimal)
  (define-key align-regexp-map (kbd ":") 'jethro/align-repeat-colon)
  (define-key align-regexp-map (kbd ";") 'jethro/align-repeat-semicolon)
  (define-key align-regexp-map (kbd "=") 'jethro/align-repeat-equal)
  (define-key align-regexp-map (kbd "\\") 'jethro/align-repeat-backslash)
  (define-key align-regexp-map (kbd "a") 'align)
  (define-key align-regexp-map (kbd "c") 'align-current)
  (define-key align-regexp-map (kbd "m") 'jethro/align-repeat-math-oper)
  (define-key align-regexp-map (kbd "r") 'jethro/align-repeat)
  (define-key align-regexp-map (kbd "|") 'jethro/align-repeat-bar)

  (bind-key "C-x a" 'align-regexp-map)
#+END_SRC

* Semantic
:PROPERTIES:
:ARCHIVE_TIME: 2019-02-01 Fri 07:39
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Languages
:ARCHIVE_CATEGORY: config
:END:

#+begin_src emacs-lisp :tangle yes
  (use-package stickyfunc-enhance
    :after semantic
    :config
    (add-to-list 'semantic-default-submodes 'global-semantic-stickyfunc-mode))
#+end_src


* Semantic-mode
:PROPERTIES:
:ARCHIVE_TIME: 2019-02-01 Fri 07:40
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Languages/C++
:ARCHIVE_CATEGORY: config
:END:

#+begin_src emacs-lisp :tangle yes
  (use-package semantic
    :ensure nil
    :hook
    (c-mode . semantic-mode)
    (c++-mode . semantic-mode))

  (use-package srefactor
    :after semantic
    :bind
    (:map c-mode-map
          ("M-RET" . srefactor-refactor-at-point)
          :map c++-mode-map
          ("M-RET" . srefactor-refactor-at-point)))
#+end_src



* Custom Commands
:PROPERTIES:
:ARCHIVE_TIME: 2019-02-02 Sat 18:54
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Better Defaults
:ARCHIVE_CATEGORY: config
:END:

** Nuke all buffers with =C-c !=

#+begin_src emacs-lisp
  (defun jethro/nuke-all-buffers ()
    (interactive)
    (dolist 'kill-buffer (buffer-list))
    (delete-other-windows))

  (bind-key "C-c !" 'jethro/nuke-all-buffers)
#+end_src


* lsp-javascript-typescript
:PROPERTIES:
:ARCHIVE_TIME: 2019-02-02 Sat 19:10
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Languages/Javascript
:ARCHIVE_CATEGORY: config
:END:
#+BEGIN_SRC emacs-lisp
  (use-package lsp-javascript-typescript
    :hook
    (js2-mode-hook . lsp-javascript-typescript-enable))
#+END_SRC


* [[https://github.com/larstvei/Focus][Focus-mode]]
  :PROPERTIES:
  :ARCHIVE_TIME: 2019-02-19 Tue 13:46
  :ARCHIVE_FILE: ~/.emacs.d/config.org
  :ARCHIVE_OLPATH: Miscellaneous
  :ARCHIVE_CATEGORY: config
  :END:
Focus provides focus-mode that dims the text of surrounding sections,
similar to iA Writer's Focus Mode.

#+begin_src emacs-lisp
  (use-package focus
    :hook
    (text-mode . focus-mode)
    (prog-mode . focus-mode)
    :custom
    (focus-mode-to-thing
     '((prog-mode . defun) (text-mode . paragraph))))
#+end_src

* notmuch async polling
:PROPERTIES:
:ARCHIVE_TIME: 2019-03-06 Wed 09:55
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Email
:ARCHIVE_CATEGORY: config
:END:
#+begin_src emacs-lisp
  (use-package async
    :config
    (run-at-time (* 60 60) nil
                 (async-start
                  (lambda ()
                    (require 'notmuch)
                    (notmuch-poll)))))
#+end_src

* visual-regexp
:PROPERTIES:
:ARCHIVE_TIME: 2019-04-03 Wed 09:56
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Editing Text
:ARCHIVE_CATEGORY: config
:END:
#+begin_src emacs-lisp

#+end_src

* Google C Style
:PROPERTIES:
:ARCHIVE_TIME: 2019-04-03 Wed 09:57
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Languages/Java
:ARCHIVE_CATEGORY: config
:END:
#+BEGIN_SRC emacs-lisp 
  (use-package google-c-style
    :commands
    (google-set-c-style))
#+END_SRC

* Stack Exchange
:PROPERTIES:
:ARCHIVE_TIME: 2019-04-03 Wed 09:58
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Miscellaneous
:ARCHIVE_CATEGORY: config
:END:
#+BEGIN_SRC emacs-lisp
  (use-package sx
    :commands sx)
#+END_SRC

* visual-regexp
:PROPERTIES:
:ARCHIVE_TIME: 2019-05-16 Thu 11:54
:ARCHIVE_FILE: ~/.emacs.d/config.org
:ARCHIVE_OLPATH: Editing Text
:ARCHIVE_CATEGORY: config
:END:
#+begin_src emacs-lisp
  (use-package visual-regexp
    :bind (("C-c m" . vr/mc-mark)))
#+end_src
