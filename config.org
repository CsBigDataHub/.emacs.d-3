: #+TITLE: Jethro's Emacs.d Configuration
* Introduction
This document is a constant work-in-progress, and will contain the
latest updates to my Emacs configuration. I have gone through several
cycles of Emacs config bankruptcy, and time and time again have come
back to a configuration similar to this.

Notes:
1. I use a Dvorak 60% keyboard, so some of the keybindings may not
   apply for you.
2. I use Stumpwm, so some of my configurations are created around that
   as well.

* Basic Setup
** Add [[https://github.com/jwiegley/use-package/issues/70][use-package]]
Use-package allows for isolation of package configuration, while
maintaining tidiness and performance.

#+BEGIN_SRC emacs-lisp :tangle yes
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-and-compile
  (defvar use-package-verbose t) 
  (require 'cl)
  (require 'use-package)
  (require 'bind-key)
  (require 'diminish)
  (setq use-package-always-ensure t))
#+END_SRC
** Emacs Server
Load the emacs server, if it is not running. This allows for
almost-instant emacs "startup".

 #+BEGIN_SRC emacs-lisp :tangle yes
   (load "server")
   (unless (server-running-p) (server-start))
 #+END_SRC
** Reloading the init file
I want an easy way to reload my configuration when I change it. I bind
it to =<f11>=.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun reload-init ()
    (interactive)
    (load-file "~/.emacs.d/init.el"))

  (global-set-key (kbd "<f11>") 'reload-init)
#+END_SRC

** Add validate
Validate is a package that checks for and reports Emacs config errors.
#+begin_src emacs-lisp :tangle yes
  (use-package validate)
#+end_src
** User configuration
   #+begin_src emacs-lisp :tangle yes
(validate-setq user-full-name "Jethro Kuan"
      user-mail-address "jethrokuan95@gmail.com")
   #+end_src
** Auto Revert
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-auto-revert-mode 1)
#+END_SRC
** Custom file
   #+BEGIN_SRC emacs-lisp :tangle yes
  (validate-setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
   #+END_SRC
** Custom font
   I use Hack, patched with Powerline. Other good alternatives include Source Code Pro.
*** Source Code Pro
    #+BEGIN_SRC emacs-lisp :tangle yes
      (add-to-list 'initial-frame-alist
                   '(font . "Iosevka-12"))
      (add-to-list 'default-frame-alist
                   '(font . "Iosevka-12"))
    #+END_SRC

** UI Cruft
   Remove useless toolbars and splash screens.

   #+begin_src emacs-lisp :tangle yes
(tooltip-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(validate-setq inhibit-splash-screen t)
(validate-setq inhibit-startup-message t)
   #+end_src

** Use y/n over yes/no
   Always prefer the shorter y/n over yes/no.

   #+BEGIN_SRC emacs-lisp :tangle yes
(defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** Replace region when typing
   Type over a selected region, instead of deleting before typing.

   #+BEGIN_SRC emacs-lisp :tangle yes
(delete-selection-mode +1)
   #+end_src

** Sentences
   Emacs uses double-spaces by default. Use single spaces by default:

   #+BEGIN_QUOTE
   NOTE: This will cause an indistinction between sentences and name abbrieviations (eg. E. B. White)
   #+END_QUOTE

   #+begin_src emacs-lisp :tangle yes
(validate-setq sentence-end-double-space nil)
   #+end_src

** Tab with 2 spaces
   #+begin_src emacs-lisp :tangle yes
     (setq-default tab-width 2)
     (setq-default js-indent-level 2)
     (setq-default indent-tabs-mode nil)
   #+end_src

** Don't wrap lines
   Don't wrap lines for coding. Create a hook that enables wrapping, for modes like org-mode and markdown-mode.

   #+begin_src emacs-lisp :tangle yes
     (setq-default truncate-lines t)
     (defun trunc-lines-hook ()
       (validate-setq truncate-lines nil))
   #+end_src

** Backup directory
   #+begin_src emacs-lisp :tangle yes
  (validate-setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (validate-setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
   #+end_src

   The following code will delete all backup files that are older than a certain date:

   #+begin_src emacs-lisp :tangle no
(message "Deleting old backup files...")
(let ((week (* 60 60 24 7))
      (current (float-time (current-time))))
  (dolist (file (directory-files temporary-file-directory t))
    (when (and (backup-file-name-p file)
               (> (- current (float-time (fifth (file-attributes file))))
                  week))
      (message "%s" file)
      (delete-file file))))
   #+end_src
** Load secrets
   #+begin_src emacs-lisp :tangle yes
(load "~/.emacs.d/secrets.el" t)
   #+end_src
** Add PATH to eshell
   #+begin_src emacs-lisp :tangle yes
  (use-package exec-path-from-shell 
    :config
    (exec-path-from-shell-initialize))
   #+end_src

** Default shell
   #+begin_src emacs-lisp :tangle yes
     (setq-default explicit-shell-file-name "/bin/bash")
     (setq-default shell-file-name "/bin/bash")
   #+end_src
** Theme
*** Adwaita
    #+BEGIN_SRC emacs-lisp :tangle no
  (load-theme 'adwaita t)
    #+END_SRC
*** Zenburn Theme
    #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package zenburn-theme
    :init
    (load-theme 'zenburn t))
    #+END_SRC
** Keybindings
*** Opening Lines
    #+begin_src emacs-lisp :tangle yes
  (defun open-next-line (arg)
    "Move to the next line and then opens a line.
     See also `newline-and-indent'."
    (interactive "p")
    (end-of-line)
    (open-line arg)
    (next-line 1)
    (when 'newline-and-indent
      (indent-according-to-mode)))

  (defun open-previous-line (arg)
    "Open a new line before the current one. 
       See also `newline-and-indent'."
    (interactive "p")
    (beginning-of-line)
    (open-line arg)
    (when 'newline-and-indent
      (indent-according-to-mode)))

  (bind-key "C-o" 'open-next-line)
  (bind-key "M-o" 'open-previous-line)
    #+end_src
*** Nuke all buffers with =C-c !=
    #+begin_src emacs-lisp :tangle yes
  (defun jethro/nuke-all-buffers ()
    (interactive)
    (mapcar 'kill-buffer (buffer-list))
    (delete-other-windows))

  (bind-key* "C-c !" 'jethro/nuke-all-buffers)
    #+end_src
*** eshell with =C-x m=
    #+begin_src emacs-lisp :tangle yes
  (bind-key* "C-x m" 'eshell)
    #+end_src
*** mark-paragraph with =M-p=
    #+begin_src emacs-lisp :tangle yes
  (bind-key* "M-p" 'mark-paragraph)
    #+end_src
*** compile with =<f9>=
    #+begin_src emacs-lisp :tangle yes
  (bind-key* "<f9>" (lambda ()
                      (interactive)
                      (validate-setq-local compilation-read-command nil)
                      (call-interactively 'compile)))
    #+end_src
**** 
** Hydra
   #+begin_src emacs-lisp :tangle yes
  (use-package hydra)
   #+end_src
*** Ample Theme
    #+BEGIN_SRC emacs-lisp :tangle no
  (use-package ample-theme
    :init
    (load-theme 'ample t))
    #+END_SRC
* Mail (notmuch)
** Basic Setup
   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package notmuch
    :bind (("<f10>" . notmuch))
    :config
    (define-key notmuch-search-mode-map "R"
    (lambda ()
      "mark message as read"
      (interactive)
      (notmuch-search-tag '("-unread")))))
   #+END_SRC
** Goobook
   #+BEGIN_SRC emacs-lisp :tangle yes
  (require 'notmuch-address)
  (validate-setq notmuch-address-command "~/.emacs.d/goobook")
  (notmuch-address-message-insinuate)
   #+END_SRC
* Ivy
  I've recently switched over from =helm= to =ivy=. Ivy is simpler, and easier to extend.
** flx
   Flx is required for fuzzy-matching.
   #+begin_src emacs-lisp :tangle yes
(use-package flx)
   #+end_src
** Counsel
   Counsel contains ivy enhancements for commonly-used functions.
   #+begin_src emacs-lisp :tangle yes
     (use-package counsel
       :demand t
       :diminish ivy-mode
       :bind*
       (("C-c C-r" . ivy-resume)
        ("M-a" . counsel-M-x)
        ("C-M-i" . counsel-imenu)
        ("C-x C-f" . counsel-find-file)
        ("C-x j" . counsel-dired-jump)
        ("C-x l" . counsel-locate)
        ("C-c g" . counsel-git)
        ("C-c j" . counsel-git-grep)
        ("C-c s" . counsel-projectile-rg)
        ("C-c f" . counsel-recentf)
        ("M-y" . counsel-yank-pop))
       :bind ((:map help-map
                    ("f" . counsel-describe-function)
                    ("v" . counsel-describe-variable)
                    ("l" . counsel-info-lookup-symbol))
              (:map ivy-minibuffer-map
                    ("C-d" . ivy-dired)
                    ("C-o" . ivy-occur))
              (:map read-expression-map
                    ("C-r" . counsel-expression-history))
              (:map ivy-minibuffer-map
                    ("<return>" . ivy-alt-done)
                    ("M-<return" . ivy-immediate-done)))
       :init
       (add-hook 'after-init-hook (lambda () (ivy-mode 1)))
       :config 
       (defun ivy-dired ()
         (interactive)
         (if ivy--directory
             (ivy-quit-and-run
              (dired ivy--directory)
              (when (re-search-forward
                     (regexp-quote
                      (substring ivy--current 0 -1)) nil t)
                (goto-char (match-beginning 0))))
           (user-error
            "Not completing files currently"))) 
       (setq counsel-find-file-at-point t)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-display-style 'fancy)
       (setq ivy-initial-inputs-alist nil)
       (setq ivy-re-builders-alist
             '((ivy-switch-buffer . ivy--regex-plus)
               (swiper . ivy--regex-plus)
               (t . ivy--regex-fuzzy))) 
       (ivy-set-actions
        t
        '(("I" insert "insert"))))
   #+end_src
* Moving Around
** Crux
   #+begin_src emacs-lisp :tangle yes
  (use-package crux 
    :bind* (("C-c o" . crux-open-with)
            ("C-c n" . crux-cleanup-buffer-or-region)
            ("C-c D" . crux-delete-file-and-buffer)
            ("C-a" . crux-move-beginning-of-line)
            ("M-o" . crux-smart-open-line)
            ("C-c r" . crux-rename-file-and-buffer)
            ("M-d" . crux-duplicate-current-line-or-region)
            ("M-D" . crux-duplicate-and-comment-current-line-or-region)
            ("s-o" . crux-smart-open-line-above)))
   #+end_src
** Open file
   #+BEGIN_SRC emacs-lisp :tangle yes
  (defun jethro/open-in-external-app ()
    "Open the current file or dired marked files in external app.
  The app is chosen from your OS's preference."
    (interactive)
    (let* (
           (-file-list
            (if (string-equal major-mode "dired-mode")
                (dired-get-marked-files)
              (list (buffer-file-name))))
           (-do-it-p (if (<= (length -file-list) 5)
                         t
                       (y-or-n-p "Open more than 5 files? "))))
      (when -do-it-p
        (cond
         ((string-equal system-type "windows-nt")
          (mapc
           (lambda (-fpath)
             (w32-shell-execute "open" (replace-regexp-in-string "/" "\\" -fpath t t))) -file-list))
         ((string-equal system-type "darwin")
          (mapc
           (lambda (-fpath)
             (shell-command
              (concat "open " (shell-quote-argument -fpath))))  -file-list))
         ((string-equal system-type "gnu/linux")
          (mapc
           (lambda (-fpath) (let ((process-connection-type nil))
                              (start-process "" nil "xdg-open" -fpath))) -file-list))))))
  (bind-key* "<f8>" 'jethro/open-in-external-app)
   #+END_SRC
** Anzu
   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package anzu
    :diminish anzu-mode 
    :config
    (global-anzu-mode +1)
    (define-key isearch-mode-map [remap isearch-query-replace]  #'anzu-isearch-query-replace)
    (define-key isearch-mode-map [remap isearch-query-replace-regexp] #'anzu-isearch-query-replace-regexp))
   #+END_SRC
** avy
   Use avy to move between visible text.
   #+begin_src emacs-lisp :tangle yes

  (use-package avy
    :bind* (("C-'" . avy-goto-char)
            ("C-," . avy-goto-char-2))
    :config
    (validate-setq avy-keys '(?h ?t ?n ?s)))
   #+end_src
** dumb-jump
   Use it to jump to function definitions. Requires no external depedencies.
   #+begin_src emacs-lisp :tangle no
(use-package dumb-jump
  :diminish dumb-jump-mode
  :bind (("C-M-g" . dumb-jump-go)
         ("C-M-p" . dumb-jump-back)
         ("C-M-q" . dumb-jump-quick-look)))
   #+end_src
** Window switching
#+begin_src emacs-lisp :tangle yes
  (use-package windmove 
    :config
    ;; use command key on Mac
    (windmove-default-keybindings 'super)
    ;; wrap around at edges
    (validate-setq windmove-wrap-around t))
#+end_src
** ace-window (disabled)
   Ace-window makes it easier to move between windows.
   #+begin_src emacs-lisp :tangle no
  (use-package ace-window
    :bind ("M-'" . ace-window)
    :config
    (validate-setq aw-keys '(?h ?t ?n ?s)))
   #+end_src
** dired
*** Requiring =dired=
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'dired)
#+END_SRC
*** Dired for Mac OSX
#+BEGIN_SRC emacs-lisp :tangle yes
  (let ((gls "/usr/local/bin/gls"))
    (if (file-exists-p gls) (validate-setq insert-directory-program gls)))
#+END_SRC
*** trash files instead of deleting them
    #+BEGIN_SRC emacs-lisp :tangle yes
  (validate-setq delete-by-moving-to-trash t)
    #+END_SRC
*** find-dired
    #+BEGIN_SRC emacs-lisp :tangle yes
  (require 'find-dired)
  (validate-setq find-ls-option '("-print0 | xargs -0 ls -ld" . "-ld"))
    #+END_SRC
*** Hide details
    Hide details and only show file and folder names.
    #+begin_src emacs-lisp :tangle no
  (defun jethro/dired-mode-setup-hook ()
    "hook for dired-mode"
    (dired-hide-details-mode 1))

  (add-hook 'dired-mode-hook 'jethro/dired-mode-setup-hook)
    #+end_src
*** Sort directories first
    #+begin_src emacs-lisp :tangle yes
(validate-setq dired-listing-switches "-aBhl  --group-directories-first")
    #+end_src
*** Recursive Copying and Deleting
    #+begin_src emacs-lisp :tangle yes
  (validate-setq dired-recursive-copies (quote always))
  (validate-setq dired-recursive-deletes (quote top))
    #+end_src
*** dired-jump from file
    #+begin_src emacs-lisp :tangle yes
  (require 'dired-x)
    #+end_src
*** allow editing of permissions
    #+BEGIN_SRC emacs-lisp :tangle yes
      (use-package wdired
        :config
        (validate-setq wdired-allow-to-change-permissions t))
    #+END_SRC
*** dired-k
    #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dired-k
    :config
    (define-key dired-mode-map (kbd "K") 'dired-k)
    (validate-setq dired-k-style 'git))
    #+END_SRC
*** dired-narrow
    #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dired-narrow
    :bind (:map dired-mode-map
                ("N" . dired-narrow-fuzzy)))
    #+END_SRC
*** dired-ranger
    #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dired-ranger
    :bind (:map dired-mode-map
                ("C" . dired-ranger-copy)
                ("P" . dired-ranger-paste)
                ("M" . dired-ranger-move)))
    #+END_SRC
* Editing Text
** visual-regexp
   #+begin_src emacs-lisp :tangle yes
  (use-package visual-regexp
    :bind* (("C-M-%" . vr/query-replace)
            ("C-c m" . vr/mc-mark)))
   #+end_src
** electric-align
   Use multiple spaces to align code and text.
   #+begin_src emacs-lisp :tangle yes
(use-package electric-align
  :ensure f
  :load-path "elisp/"
  :diminish electric-align-mode
  :config (add-hook 'prog-mode-hook 'electric-align-mode))
   #+end_src
** aggressive-indent
   Keep your text indented at all times. Remember to turn this off for indentation-dependent languages like Python and Haml.
   #+begin_src emacs-lisp :tangle yes
(use-package aggressive-indent
  :diminish aggressive-indent-mode
  :config (add-hook 'prog-mode-hook 'aggressive-indent-mode))
   #+end_src
** multiple-cursors
   A port of Sublime Text's multiple-cursors functionality.
   #+begin_src emacs-lisp :tangle yes
(use-package multiple-cursors
  :bind (("C-M-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C-<" . mc/mark-all-like-this)))
   #+end_src
** expand-region
   Use this often, and in combination with multiple-cursors.
   #+begin_src emacs-lisp :tangle yes
  (use-package expand-region
    :bind (("C-=" . er/expand-region)))
   #+end_src
** iedit
   #+BEGIN_SRC emacs-lisp :tangle yes
(use-package iedit)
   #+END_SRC
** smartparens
   #+begin_src emacs-lisp :tangle yes
     (use-package smartparens
       :bind
       (:map smartparens-mode-map
             ("C-M-f" . sp-forward-sexp)
             ("C-M-b" . sp-backward-sexp)
             ("C-M-u" . sp-backward-up-sexp)
             ("C-M-d" . sp-down-sexp)
             ("C-M-p" . sp-backward-down-sexp)
             ("C-M-n" . sp-up-sexp)
             ("M-s" . sp-splice-sexp)
             ("M-<up>" . sp-splice-sexp-killing-backward)
             ("M-<down>" . sp-splice-sexp-killing-forward)
             ("M-r" . sp-splice-sexp-killing-around)
             ("C-)" . sp-forward-slurp-sexp)
             ("C-<right>" . sp-forward-slurp-sexp)
             ("C-}" . sp-forward-barf-sexp)
             ("C-<left>" . sp-forward-barf-sexp)
             ("C-(" . sp-backward-slurp-sexp)
             ("C-M-<left>" . sp-backward-slurp-sexp)
             ("C-{" . sp-backward-barf-sexp)
             ("C-M-<right>" . sp-backward-barf-sexp)
             ("M-S" . sp-split-sexp))
       :init
       (add-hook 'lisp-mode-hook 'turn-on-smartparens-strict-mode)
       (add-hook 'emacs-lisp-mode-hook 'turn-on-smartparens-strict-mode)
       (add-hook 'clojure-mode-hook 'turn-on-smartparens-strict-mode)
       (add-hook 'js2-mode-hook 'turn-on-smartparens-strict-mode)
       :config
       (require 'smartparens-config)

       ;; Org-mode config

       (sp-with-modes 'org-mode
         (sp-local-pair "'" nil :unless '(sp-point-after-word-p))
         (sp-local-pair "*" "*" :actions '(insert wrap) :unless '(sp-point-after-word-p sp-point-at-bol-p) :wrap "C-*" :skip-match 'sp--org-skip-asterisk)
         (sp-local-pair "_" "_" :unless '(sp-point-after-word-p))
         (sp-local-pair "/" "/" :unless '(sp-point-after-word-p) :post-handlers '(("[d1]" "SPC")))
         (sp-local-pair "~" "~" :unless '(sp-point-after-word-p) :post-handlers '(("[d1]" "SPC")))
         (sp-local-pair "=" "=" :unless '(sp-point-after-word-p) :post-handlers '(("[d1]" "SPC")))
         (sp-local-pair "«" "»"))

       (defun sp--org-skip-asterisk (ms mb me)
         (or (and (= (line-beginning-position) mb)
                  (eq 32 (char-after (1+ mb))))
             (and (= (1+ (line-beginning-position)) me)
                  (eq 32 (char-after me))))))
   #+end_src
** zap-up-to-char
   #+begin_src emacs-lisp :tangle yes
  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR.

    \(fn arg char)"
    'interactive)

  (bind-key* "M-z" 'zap-up-to-char)
   #+end_src
** move-text
   #+begin_src emacs-lisp :tangle yes
  (use-package move-text
    :bind (("M-<up>" . move-text-up)
           ("M-<down>" . move-text-down)))
   #+end_src
** Linting with Flycheck
   #+begin_src emacs-lisp :tangle yes
     (use-package flycheck
       :init
       (add-hook 'prog-mode-hook 'global-flycheck-mode)
       :config
       (global-set-key (kbd "C-c h f")
                       (defhydra hydra-flycheck
                         (:pre (progn (validate-setq hydra-lv t) (flycheck-list-errors))
                               :post (progn (validate-setq hydra-lv nil) (quit-windows-on "*Flycheck errors*"))
                               :hint nil)
                         "Errors"
                         ("f"  flycheck-error-list-set-filter                            "Filter")
                         ("n"  flycheck-next-error                                       "Next")
                         ("p"  flycheck-previous-error                                   "Previous")
                         ("<" flycheck-first-error                                      "First")
                         (">"  (progn (goto-char (point-max)) (flycheck-previous-error)) "Last")
                         ("q"  nil)))
       (use-package flycheck-pos-tip
         :init
         (add-hook 'flycheck-mode-hook (lambda ()
                                         (flycheck-pos-tip-mode)))))
   #+end_src
** Templating with Yasnippet
   #+begin_src emacs-lisp :tangle yes
  (use-package yasnippet
    :diminish yas-global-mode yas-minor-mode
    :init (add-hook 'after-init-hook 'yas-global-mode)
    :config (validate-setq yas-snippet-dirs '("~/.emacs.d/snippets/")))
   #+end_src
** Autocompletions with Company
   #+begin_src emacs-lisp :tangle yes
     (use-package company
       :diminish company-mode
       :init
       (add-hook 'after-init-hook 'global-company-mode)
       :config
       (require 'company-dabbrev)
       (require 'company-dabbrev-code)
       (validate-setq company-dabbrev-ignore-case nil
                      company-dabbrev-code-ignore-case nil
                      company-dabbrev-downcase nil
                      company-idle-delay 0
                      company-begin-commands '(self-insert-command)
                      company-transformers '(company-sort-by-occurrence))
       (use-package company-quickhelp
         :config (company-quickhelp-mode 1)))
   #+end_src
** Spellcheck with Flyspell
   #+begin_src emacs-lisp :tangle yes
  (use-package flyspell 
    :ensure f 
    :diminish flyspell-mode
    :init
    (setenv "DICTIONARY" "en_GB")
    :config   
    (add-hook 'markdown-mode-hook 'flyspell-mode))
   #+end_src
* Language Support
** Direnv
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package direnv
    :config
    (direnv-mode)
    (validate-setq direnv-always-show-summary t))
#+END_SRC
** Common Lisp
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package slime
       :config
       (validate-setq inferior-lisp-program "sbcl")
       (validate-setq slime-contribs '(slime-fancy))
       (use-package slime-company
         :config
         (slime-setup '(slime-company))))
   #+END_SRC
** Emacs Lisp
   #+begin_src emacs-lisp :tangle yes
  (bind-key "C-c C-k" 'eval-buffer emacs-lisp-mode-map)
   #+end_src
** Nix
   #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package nix-mode
    :config
    (add-hook 'nix-mode-hook (lambda ()
                               (aggressive-indent-mode -1))))
   #+END_SRC
*** completion
    #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company-nixos-options
    :config
    (add-to-list 'company-backends 'company-nixos-options))
    #+END_SRC
** Go
   #+begin_src emacs-lisp :tangle yes
(use-package go-mode
  :mode ("\\.go\\'" . go-mode)
  :config (progn
            (add-hook 'go-mode-hook 'compilation-auto-quit-window)
            (add-hook 'go-mode-hook (lambda ()
                                      (set (make-local-variable 'company-backends) '(company-go))
                                      (company-mode)))
            (add-hook 'go-mode-hook (lambda ()
                                      (add-hook 'before-save-hook 'gofmt-before-save)
                                      (local-set-key (kbd "M-.") 'godef-jump)))
            (add-hook 'go-mode-hook
                      (lambda ()
                        (unless (file-exists-p "Makefile")
                          (set (make-local-variable 'compile-command)
                               (let ((file (file-name-nondirectory buffer-file-name)))
                                 (format "go build %s"
                                         file))))))
            (use-package go-dlv
              :config (require 'go-dlv))
            (use-package golint
              :config
              (add-to-list 'load-path (concat (getenv "GOPATH")  "/src/github.com/golang/lint/misc/emacs"))
              (require 'golint))
            (use-package gorepl-mode
              :config (add-hook 'go-mode-hook #'gorepl-mode))
            (use-package company-go
              :config (add-hook 'go-mode-hook (lambda ()
                                                (set (make-local-variable 'company-backends) '(company-go))
                                                (company-mode))))))
   #+end_src
** C
   #+BEGIN_SRC emacs-lisp :tangle no
  (add-hook 'c-mode-hook
            (lambda ()
              (unless (file-exists-p "Makefile")
                (set (make-local-variable 'compile-command)
                     (let ((file (file-name-nondirectory buffer-file-name)))
                       (format "cc -Wall %s -o %s --std=c99"
                               file
                               (file-name-sans-extension file)))))))
   #+END_SRC
** C++
*** C++ compile function
    #+begin_src emacs-lisp :tangle yes
(add-hook 'c++-mode-hook
          (lambda ()
            (unless (file-exists-p "Makefile")
              (set (make-local-variable 'compile-command)
                   (let ((file (file-name-nondirectory buffer-file-name)))
                     (format "g++ -Wall -s -pedantic-errors %s -o %s --std=c++14"
                             file
                             (file-name-sans-extension file)))))))
    #+end_src
** Fish
   #+begin_src emacs-lisp :tangle yes
  (use-package fish-mode
    :mode ("\\.fish\\'" . fish-mode)
    :init (add-hook 'fish-mode-hook
                    (lambda () (aggressive-indent-mode -1))))
   #+end_src
** Rust
   #+begin_src emacs-lisp :tangle yes
(use-package rust-mode
  :mode ("\\.rs\\'" . rust-mode))
   #+end_src
** Python
*** Disabling aggressive-indent-mode
#+BEGIN_SRC emacs-lisp :tangle yes
  (add-hook 'python-mode-hook (lambda () (aggressive-indent-mode -1)))
#+END_SRC
*** Python path
#+BEGIN_SRC emacs-lisp :tangle yes
  (eval-after-load "python-mode"
    (lambda ()
      (validate-setq python-remove-cwd-from-path t)))
#+END_SRC
*** Sphinx Docs
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package sphinx-doc
    :init
    (add-hook 'python-mode-hook (lambda ()
                                  (sphinx-doc-mode 1))))
#+END_SRC
*** Anaconda
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package anaconda-mode
    :init
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'anaconda-eldoc-mode))
#+END_SRC
**** Company
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company-anaconda
    :config
    (eval-after-load "company"
      '(add-to-list 'company-backends '(company-anaconda))))
#+END_SRC
*** isort
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package py-isort
    :defer t
    :init
    (add-hook 'before-save-hook 'py-isort-before-save))
#+END_SRC
*** yapfify
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package yapfify 
    :init
    (add-hook 'python-mode-hook 'yapf-mode))
#+END_SRC
*** Autopep8
    #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package py-autopep8
    :init
    (add-hook 'python-mode-hook 'py-autopep8-enable-on-save))
    #+END_SRC
*** Pyvenv
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package pyvenv)
#+END_SRC
*** Pytest
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package pytest
    :bind (:map python-mode-map
                ("C-c a" . pytest-all)
                ("C-c m" . pytest-module)
                ("C-c ." . pytest-one)
                ("C-c d" . pytest-directory)
                ("C-c p a" . pytest-pdb-all)
                ("C-c p m" . pytest-pdb-module)
                ("C-c p ." . pytest-pdb-one)))
#+END_SRC
** HTML
*** Web-mode
    #+begin_src emacs-lisp :tangle yes
   (use-package web-mode
     :mode (("\\.html\\'" . web-mode)
            ("\\.html\\.erb\\'" . web-mode)
            ("\\.mustache\\'" . web-mode)
            ("\\.jinja\\'" . web-mode)
            ("\\.njk\\'" . web-mode)
            ("\\.php\\'" . web-mode))
     :config
     (validate-setq web-mode-enable-css-colorization t)
     (validate-setq web-mode-code-indent-offset 2)
     (validate-setq web-mode-markup-indent-offset 2))
    #+end_src
*** Emmet-mode
    #+begin_src emacs-lisp :tangle yes
(use-package emmet-mode
  :diminish emmet-mode
  :config
  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'vue-mode-hook 'emmet-mode))
    #+end_src
** CSS
*** Rainbow-mode
    #+begin_src emacs-lisp :tangle no
   (use-package rainbow-mode
     :diminish rainbow-mode
     :config
     (add-hook 'css-mode-hook 'rainbow-mode)
     (add-hook 'scss-mode-hook 'rainbow-mode))
    #+end_src
*** SCSS-mode
    #+begin_src emacs-lisp :tangle yes
 (use-package scss-mode
   :mode "\\.scss\\'" 
   :config (progn
             (validate-setq scss-compile-at-save nil)))
    #+end_src
** JS
*** Flycheck
    #+begin_src emacs-lisp :tangle yes
      (setq-default flycheck-disabled-checkers
		    (append flycheck-disabled-checkers
			    '(javascript-jshint)))
      (flycheck-add-mode 'javascript-eslint 'js2-mode)
      (flycheck-add-mode 'javascript-eslint 'web-mode)
    #+end_src
*** Skewer
    #+begin_src emacs-lisp :tangle yes
  (use-package skewer-mode  
    :bind (:map skewer-mode-map
                ("C-c C-k" . skewer-load-buffer))
    :config
    (add-hook 'js2-mode-hook 'skewer-mode))
    #+end_src
*** js-comint
    #+begin_src emacs-lisp :tangle no
  (use-package js-comint
    :config
    (add-hook 'js2-mode-hook
              (lambda ()
                (local-set-key (kbd "C-x C-e") 'js-send-last-sexp)
                (local-set-key (kbd "C-M-x") 'js-send-last-sexp-and-go)
                (local-set-key (kbd "C-c b") 'js-send-buffer)
                (local-set-key (kbd "C-c C-b") 'js-send-buffer-and-go)
                (local-set-key (kbd "C-c l") 'js-load-file-and-go))))
    #+end_src
*** JS2-mode

    Here I also added =tern-mode=. This requires the tern executable:
    #+begin_src bash :tangle no
npm install -g tern
    #+end_src

    #+begin_src emacs-lisp :tangle yes
      (use-package js2-mode
        :mode ("\\.js\\'" . js2-mode)
        :config
        (use-package tern
          :diminish tern-mode
          :config
          (validate-setq js-switch-indent-offset 2)
          (add-hook 'js2-mode-hook 'tern-mode) 
          (use-package company-tern
            :config
            (add-to-list 'company-backends 'company-tern))))
    #+end_src
*** js-doc
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package js-doc
    :config
    (validate-setq js-doc-mail-address "jethrokuan95@gmail.com"
          js-doc-author (format "Jethro Kuan <%s>" js-doc-mail-address)
          js-doc-url "http://www.jethrokuan.com/"
          js-doc-license "MIT")
    (add-hook 'js2-mode-hook
              #'(lambda ()
                  (define-key js2-mode-map "\C-ci" 'js-doc-insert-function-doc)
                  (define-key js2-mode-map "@" 'js-doc-insert-tag))))
#+END_SRC
*** JS2-refactor
    #+begin_src emacs-lisp :tangle yes
  (use-package js2-refactor
    :config
    (add-hook 'js2-mode-hook #'js2-refactor-mode)
    (js2r-add-keybindings-with-prefix "C-c C-j"))
    #+end_src
*** Vue-mode
    Additional support for Vue.js projects.

    #+begin_src emacs-lisp :tangle yes
 (use-package vue-mode
   :mode "\\.vue\\'")
    #+end_src
** JSON
   #+begin_src emacs-lisp :tangle yes
 (use-package json-mode
   :mode "\\.json\\'"
   :config (add-hook 'json-mode-hook (lambda ()
                                       (make-local-variable 'js-indent-level)
                                       (validate-setq js-indent-level 2))))
   #+end_src
** Markdown
   #+begin_src emacs-lisp :tangle yes
(use-package markdown-mode
  :mode ("\\.md\\'" . markdown-mode)
  :config (progn
            (validate-setq markdown-command "multimarkdown")
            (add-hook 'markdown-mode-hook #'trunc-lines-hook)))
   #+end_src
** Clojure
*** Clojure-mode
    #+begin_src emacs-lisp :tangle yes
  (use-package clojure-mode
    :mode (("\\.clj\\'" . clojure-mode)
           ("\\.boot\\'" . clojure-mode)
           ("\\.edn\\'" . clojure-mode)
           ("\\.cljs\\'" . clojurescript-mode)
           ("\\.cljs\\.hl\\'" . clojurescript-mode))
    :init
    (add-hook 'clojure-mode-hook #'eldoc-mode)
    (add-hook 'clojure-mode-hook #'subword-mode)
    (add-hook 'clojure-mode-hook #'cider-mode)
    (add-hook 'clojure-mode-hook #'clj-refactor-mode))
    #+end_src
*** Cider
    #+begin_src emacs-lisp :tangle yes
      (use-package cider
        :init
        (add-hook 'cider-mode-hook #'clj-refactor-mode)
        (add-hook 'cider-repl-mode-hook #'company-mode)
        (add-hook 'cider-mode-hook #'company-mode)
        :diminish subword-mode
        :config
        (validate-setq nrepl-log-messages t                  
              cider-repl-display-in-current-window t
              cider-repl-use-clojure-font-lock t    
              cider-prompt-save-file-on-load 'always-save
              cider-font-lock-dynamically '(macro core function var)
              nrepl-hide-special-buffers t
              cider-show-error-buffer nil
              cider-overlays-use-font-lock t
              cider-repl-result-prefix ";; => ")
        (validate-setq cider-cljs-lein-repl "(do (use 'figwheel-sidecar.repl-api) (start-figwheel!) (cljs-repl))")
        (cider-repl-toggle-pretty-printing))
    #+end_src
*** clj-refactor
    #+begin_src emacs-lisp :tangle yes
(use-package clj-refactor
  :defines cljr-add-keybindings-with-prefix
  :diminish clj-refactor-mode
  :config (cljr-add-keybindings-with-prefix "C-c C-j"))
    #+end_src
*** Squiggly-clojure
    #+begin_src emacs-lisp :tangle yes
  (use-package flycheck-clojure
    :config
    (flycheck-clojure-setup))
    #+end_src
** Latex
*** AucTeX
    #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package auctex
    :defer t
    :config
    (validate-setq TeX-auto-save t
          TeX-parse-self t
          TeX-syntactic-comment t
          ;; Synctex support
          TeX-source-correlate-start-server nil
          ;; Don't insert line-break at inline math
          LaTeX-fill-break-at-separators nil)
    (validate-setq TeX-view-program-list '(("Evince" "evince --page-index=%(outpage) %o")
                                  ("qpdfview" "qpdfview %o#%(outpage)")))
    (validate-setq TeX-view-program-selection '((output-pdf "qpdfview")
                                       (output-pdf "Evince")))
    (when latex-enable-auto-fill
      (add-hook 'LaTeX-mode-hook 'latex/auto-fill-mode))
    (when latex-enable-folding
      (add-hook 'LaTeX-mode-hook 'TeX-fold-mode))
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
    (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode))
    #+END_SRC
*** Autocomplete support
    #+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company-auctex
    :defer t)
    #+END_SRC
* Visual Enhancements
** linum-mode (Disabled)
   #+begin_src emacs-lisp :tangle no
(add-hook 'prog-mode-hook 
  (lambda ()
    (linum-mode 1)))
   #+end_src
** hl-line-mode
   #+begin_src emacs-lisp :tangle yes
(global-hl-line-mode 1)
   #+end_src
** whitespace-mode
   Show fill-column.
   #+begin_src emacs-lisp :tangle yes
(require 'whitespace)
(validate-setq whitespace-line-column 80) ;; limit line length
(validate-setq whitespace-style '(face lines-tail))

(add-hook 'prog-mode-hook 'whitespace-mode)
   #+end_src
** Page-break-lines
   #+begin_src emacs-lisp :tangle yes
(use-package page-break-lines)
   #+end_src
** Smart-mode-line
   #+begin_src emacs-lisp :tangle yes
     (use-package smart-mode-line
       :init
       (add-hook 'after-init-hook 'sml/setup)
       :config 
       (validate-setq sml/theme 'respectful)
       (validate-setq sml/name-width 30)
       (validate-setq sml/shorten-directory t)
       (validate-setq sml/shorten-modes t)
       (validate-setq sml/mode-width 'full)
       (validate-setq sml/replacer-regexp-list
                      '(("^~/.org/" ":O:")
                        ("^~/\\.emacs\\.d/" ":ED")))
       (validate-setq rm-blacklist
                      (format "^ \\(%s\\)$"
                              (mapconcat #'identity
                                         '("FlyC.*"
                                           "Projectile.*"
                                           "GitGutter"
                                           "ivy"
                                           "company"
                                           ""
                                           "doom"
                                           ","
                                           "ElDoc")
                                         "\\|"))))
   #+end_src
*** Showing time
#+begin_src emacs-lisp :tangle yes
  (display-time-mode 1)
  (eval-after-load "display-time-mode"
    (validate-setq display-time-24hr-format t))
#+end_src
** nyan-mode
   #+begin_src emacs-lisp :tangle no
  (use-package nyan-mode
    :config
    (nyan-mode 1))
   #+end_src
** Zooming
   #+begin_src emacs-lisp :tangle yes
(defhydra hydra-zoom (global-map "<f2>")
  "zoom"
  ("i" text-scale-increase "in")
  ("o" text-scale-decrease "out"))
   #+end_src
** beacon
   Beacon makes sure you don't lose track of your cursor when jumping around a buffer.
   #+begin_src emacs-lisp :tangle yes
  (use-package beacon
    :diminish beacon-mode
    :config
    (beacon-mode 1)
    (validate-setq beacon-push-mark 10))
   #+end_src
** show-paren
   Always show matching parenthesis.
   #+begin_src emacs-lisp :tangle yes
(show-paren-mode 1)
(validate-setq show-paren-delay 0)
   #+end_src
** golden-ratio
   Give the working window more screen estate.
   #+begin_src emacs-lisp :tangle yes
(use-package golden-ratio
  :diminish golden-ratio-mode
  :config (progn
            (add-to-list 'golden-ratio-extra-commands 'ace-window)
            (golden-ratio-mode 1)))
   #+end_src
** volatile-highlights
   Highlights recently copied/pasted text.
   #+begin_src emacs-lisp :tangle yes
(use-package volatile-highlights
  :diminish volatile-highlights-mode
  :config (volatile-highlights-mode t))
   #+end_src
** git-gutter-fringe+
   Displays added/modified/deleted on the left.
   #+begin_src emacs-lisp :tangle yes
     (use-package git-gutter-fringe+
       :diminish git-gutter+-mode
       :config
       (global-git-gutter+-mode)
       (set-face-foreground 'git-gutter+-modified "gold1")
       (set-face-foreground 'git-gutter+-added    "SeaGreen")
       (set-face-foreground 'git-gutter+-deleted  "IndianRed")
       (validate-setq git-gutter-fr+-side 'left-fringe))
   #+end_src
* Project Management
** Smerge-mode
Useful when handling git merge conflicts.
#+begin_src emacs-lisp :tangle yes
  (use-package smerge-mode
    :config
    (global-set-key (kbd "C-c h s")
                    (defhydra hydra-smerge (:pre (smerge-mode 1) :color red :post (smerge-mode -1))
                      "Smerge mode"
                      ("<down>" smerge-next        "Next conflict")
                      ("<up>"   smerge-prev        "Previous conflict")
                      ("M-a"    smerge-keep-all    "Keep all")
                      ("M-m"    smerge-keep-mine   "Keep mine")
                      ("M-o"    smerge-keep-other  "Keep other"))))
#+end_src
** Magit
#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :bind (("s-g" . magit-status)
           ("s-G" . magit-blame))
    :init
    (add-hook 'magit-mode-hook 'hl-line-mode)
    :config
    (validate-setq magit-auto-revert-mode nil))
#+end_src

** Projectile
#+begin_src emacs-lisp :tangle yes
  (use-package projectile
    :demand t
    :init (projectile-global-mode 1)
    :bind-keymap* ("C-x p" . projectile-command-map)
    :config
    (require 'projectile)
    (use-package counsel-projectile 
      :bind (("s-f" . counsel-projectile-find-file)
             ("s-b" . counsel-projectile-switch-to-buffer))
      :config
      (counsel-projectile-on))
    (validate-setq projectile-use-git-grep t)
    (validate-setq projectile-create-missing-test-files t)
    (validate-setq projectile-completion-system 'ivy)

    (validate-setq projectile-switch-project-action
                   #'projectile-commander)
    (def-projectile-commander-method ?S
      "Run a search in the project"
      (counsel-projectile-rg))
    (def-projectile-commander-method ?s
      "Open a *eshell* buffer for the project."
      (projectile-run-eshell))
    (def-projectile-commander-method ?d
      "Open project root in dired."
      (projectile-dired))
    (def-projectile-commander-method ?g
      "Show magit status."
      (magit-status))
    (def-projectile-commander-method ?j
      "Jack-in."
      (let* ((opts (projectile-current-project-files))
             (file (ivy-read
                    "Find file: " 
                    opts)))
        (find-file (expand-file-name
                    file (projectile-project-root)))
        (run-hooks 'projectile-find-file-hook)
        (cider-jack-in))))
#+end_src

* Profiling
** esup
#+begin_src emacs-lisp :tangle yes
(use-package esup
  :defer t)
#+end_src
** keyfreq
#+begin_src emacs-lisp :tangle yes
(use-package keyfreq
  :config
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))
#+end_src
* Miscellaneous
** which-key
#+begin_src emacs-lisp :tangle yes
(use-package which-key
  :diminish which-key-mode
  :config (add-hook 'after-init-hook 'which-key-mode))
#+end_src
** nameless
#+begin_src emacs-lisp :tangle no
  (use-package nameless
    :diminish nameless-mode
    :init (add-hook 'emacs-lisp-mode-hook 'nameless-mode-from-hook)
    :config
    (validate-setq nameless-global-aliases
                   '(("fl" . "font-lock")
                     ("s" . "seq")
                     ("me" . "macroexp")
                     ("c" . "cider")
                     ("q" . "queue"))))
#+end_src
** firestarter
#+begin_src emacs-lisp :tangle yes
(use-package firestarter
  :bind ("C-c M s" . firestarter-mode)
  :init (put 'firestarter 'safe-local-variable 'identity))
#+end_src
** Paradox
Use Paradox instead of the default =package-list-packages=. =jethro/paradox-user-token= is defined in =secrets.el=, and contains a github API token which has =public_repo= permissions.
#+begin_src emacs-lisp :tangle yes
  (use-package paradox
    :commands paradox-list-packages)
#+end_src
** darkroom
#+begin_src emacs-lisp :tangle yes
(use-package darkroom
  :bind (("C-c M d" . darkroom-mode)
         ("C-c M t" . darkroom-tentative-mode)))
#+end_src
** bury-successful-compilation
Closes compile buffer if there are no errors.
#+begin_src emacs-lisp :tangle yes
(use-package bury-successful-compilation
  :config
  (bury-successful-compilation 1))
#+end_src
